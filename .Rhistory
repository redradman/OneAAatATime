ecological_footprint_2012 -
ecological_footprint_2000)
# PART A
A4Q4A <- hist(countriesMutated$ecological_diff,
xlab = "Ecological difference (2000 - 2012)",
main = "Histogram of ecological difference between 2012 and 2000",
col = "#1F4690")
# PART A
A4Q4A <- hist(countriesMutated$ecological_diff,
xlab = "Ecological difference (2000 - 2012)",
main = "Histogram of ecological difference between 2012 and 2000",
col = "#1F4690")
############## Q4 ##############
countries <- read.csv("DataForLabs/countries.csv")
head(countries)
library(ggthemes)
library(ggplot2)
library(dplyr)
library(readr)
library(car)
############ Q1 ###############
bumpusData <- read.csv(file.path("DataForLabs","bumpus.csv"))
# PART A
ggplot(bumpusData, aes(x = total_length_mm)) +
geom_histogram(binwidth = 1) +
xlab("Total Length (mm)") +
theme_classic()
# PART B
qqnorm(bumpusData$total_length_mm)
qqline(bumpusData$total_length_mm)
# PART C
mean(bumpusData$total_length_mm)
# mean : 159.5441
t.test(bumpusData$total_length_mm)$conf.int
############ Q2 ###############
mammals <- read.csv("DataForLabs/mammals.csv")
# plotting the body mass
A4Q2A <- ggplot(mammals, aes(x = body_mass_kg)) +
geom_histogram(fill = "#1363DF", colour = "#47B5FF") +
labs(title = "Body mass distribution",
caption = "The distribution does not seem to be normal as the moajority of the data is close
to 0 and there are only 2 observable data points at 2500 and 6500 approx
so the data given the shape of the chart does not seem to have a normal distribution.
So the data is heavily left skewed.
The QQ plot on the 3rd page show that the data is left skewed") +
xlab("Body mass (kg)") + theme_minimal()
A4Q2A
ggsave("A4Q2A.png",A4Q2A)
# plotting the LOG of body mass
mammalsMutated <- mutate(mammals, log_body_mass_kg = log(mammals$body_mass_kg))
A4Q2B <- ggplot(mammalsMutated, aes(x = log_body_mass_kg)) +
geom_histogram(fill = "#1363DF", colour = "#47B5FF") +
xlab("log of Body mass (kg)") +
labs(title = "Distribution of log of body mass (kg)",
caption = "The distribution of log of body mass does not seem to be
normal. This is because the data seems to be considerably left skewed.
The qqplot on the 4th page shows that the data is left skewed") +
theme_minimal()
A4Q2B
ggsave("A4Q2B.png",A4Q2B)
qqnorm(mammalsMutated$body_mass_kg)
qqline(mammalsMutated$body_mass_kg)
qqnorm(mammalsMutated$log_body_mass_kg)
qqline(mammalsMutated$log_body_mass_kg)
# just for me (no need to share this lol) (The fun one)
ggplot(bumpusData, aes(x = weight_g, fill = survival)) +
geom_histogram() +
xlab("Weight (g)") +
labs(title = "Comparison of weight by survival category",
position = "identity")
# PART A
ggplot(bumpusData, aes(x = weight_g, fill = as.factor(survival))) +
geom_histogram() + facet_wrap(~ survival, ncol = 1) +
xlab("Weight (g)") +
labs(title = "Comparison of weight by survival category",
fill = "Survival") + theme_minimal()
# filtering the survivors and dead Plural(bumpus)
bumpusDead <- filter(bumpusData, survival == "survived")
bumpusAlive <- filter(bumpusData, survival == "died")
# using qqnorm and qqline
# for the survivors
qqnorm(bumpusAlive$weight_g)
qqline(bumpusAlive$weight_g)
# for dead ones
qqnorm(bumpusDead$weight_g)
qqline(bumpusDead$weight_g)
# PART B
t.test(data = bumpusData, weight_g ~ survival, var.equal = FALSE)
# PART C
t.test(data = bumpusData, weight_g ~ survival, var.equal = FALSE)$conf.int
# PART D
leveneTest(data = bumpusData, weight_g ~ survival, center = mean)
# DO NOT SUBMIT THIS PART #
var(bumpusAlive$weight_g)
var(bumpusDead$weight_g)
############## Q4 ##############
countries <- read.csv("DataForLabs/countries.csv")
head(countries)
# adding emission diff to the csv table
countriesMutated <- mutate(countries, ecological_diff <-
ecological_footprint_2012 -
ecological_footprint_2000)
# PART A
A4Q4A <- hist(countriesMutated$ecological_diff,
xlab = "Ecological difference (2000 - 2012)",
main = "Histogram of ecological difference between 2012 and 2000",
col = "#1F4690")
# PART B
t.test(countries$ecological_footprint_2000,countries$ecological_footprint_2012,
paired = TRUE)
# PART C
print("The t-test returned p-value = 0.008434,
so we can reject the null hypothesis since this is lower than 0.05.
The null hypotheis in this case is that the mean of difference is 0.
In other words, the ecological footprint in 2000 and 2012 has
remained relatively the same. Since the returned p-value is less than 0.05,
we reject this null hypothesis. Meaning that it has changed over time.
More specfically the ecological footprint has been reduced.")
############## Q5 ##############
# importing the csv file
shaving <- read_csv("DataForLabs/leg shaving.csv")
# PART A
A4Q4A <- hist(countriesMutated$ecological_diff,
xlab = "Ecological difference (2000 - 2012)",
main = "Histogram of ecological difference between 2012 and 2000",
col = "#1F4690")
############## Q4 ##############
countries <- read.csv("DataForLabs/countries.csv")
package.install("quantstart")
packages.install("quantstart")
install.packages("quantstart")
install.packages("quantstrat")
av <- available.packages(filters=list())
av[av[, "quantstrat"] == pkg, ]
av[av[, "Package"] == quantstrat, ]
av[av[, "quantstrat"] == pkg]
install.packages("devtools")
install.packages(c("FinancialInstrument","PerformanceAnalytics"))
install.packages("FinancialInstrument") #if not installed
install.packages("PerformanceAnalytics") #if not installed
devtools::install_github("braverock/blotter")
devtools::install_github("braverock/quantstrat")
import quantstrat
help(quantstrat)
library(dplyr)
?make.name
?make.names
?runif
num_of_dots = 10000
for (i in 1:num_of_dots) {}
for (i in 1:num_of_dots) {}
?runif
dots_in_circle = dots_in_circle + 1
dots_in_circle = dots_in_circle + 1
dots = dots + 1
dots <- 0
dots = dots + 1
if (x^2 + y^2 <= 1) {
dots = dots + 1
}
number_of_dots <- 10000
number_of_dots <- 10000
for (i in 1:number_of_dots) {
x <- runif(1, min = -1, max = 1)
y <- runif(1, min = -1, max = 1)
if (x^2 + y^2 <= 1) {
dots = dots + 1
}
}
dots
mypi <- 4 * dots / number_of_dots
mypi
number_of_dots <- 100000
dots <- 0
for (i in 1:number_of_dots) {
x <- runif(1, min = -1, max = 1)
y <- runif(1, min = -1, max = 1)
if (x^2 + y^2 <= 1) {
dots = dots + 1
}
}
mypi <- 4 * dots / number_of_dots
mypi
number_of_dots <- 10000000
dots <- 0
for (i in 1:number_of_dots) {
x <- runif(1, min = -1, max = 1)
y <- runif(1, min = -1, max = 1)
if (x^2 + y^2 <= 1) {
dots = dots + 1
}
}
mypi <- 4 * dots / number_of_dots
mypi
number_of_dots <- 10000000
dots <- 0
for (i in 1:number_of_dots) {
x <- runif(1, min = -1, max = 1)
y <- runif(1, min = -1, max = 1)
if (x^2 + y^2 <= 1) {
dots = dots + 1
}
}
mypi <- 4 * dots / number_of_dots
mypi
?fruit_name
?as.factor
sth <- c(1,2,3,2,2,2,1,1,1,1,1,3,3,3,3,3)
as.factor(sth)
sth <- as.factor(sth)
sth
sth
as.numeric(sth)
sth <- as.numeric(sth)
sth
as_factor(sth)
library(tidyverse)
as_factor(sth)
as.factor(sth)
?as_factor
as.factor(sth, levels = unique(sth))
as_factor(sth, levels = unique(sth))
?read_table2()
install.packages(c('repr', 'IRdisplay', 'IRkernel'), type = 'source')
?tibble
library(tidyverse)
?tibble
?tibble
tibble(a = 1:5)
?ggpairs
??ggpairs
?ggpairs
library(repr)
?ggpairs
library(GGally)
install.packages(GGally)
install.packages("GGally")
?ggpairs
library(broom)
?ggpairs
??ggpairs
number_of_dots <- 1000
dots_in_circle <- 0
for (i in 1:number_of_dots) {
x <- runif(1, min = -1, max = 1)
y <- runif(1, min = -1, max = 1)
if (x^2 + y^2 < 1) {
dots_in_circle = dots_in_circle + 1
}
}
number_of_dots <- 1000
dots_in_circle <- 0
for (i in 1:number_of_dots) {
x <- runif(1, min = -1, max = 1)
y <- runif(1, min = -1, max = 1)
if (x^2 + y^2 < 1) {
dots_in_circle = dots_in_circle + 1
}
}
IRkernel::installspec(user = FALSE)
tibble(q = 1:10)
library(tidyverse)
tibble(q = 1:10)
library(infer)
qs = tibble(q = 1:10)
rep_sample_n(qs, size = 5)
qs = tibble(q = 1:7)
rep_sample_n(qs, reps = 10000, replace = TRUE, size = 7)
boot <- rep_sample_n(qs, reps = 10000, replace = TRUE, size = 7)
boot |> group_by(replicate) |> summarize(mean = mean(q))
boot |> group_by(replicate) |> summarize(mean = mean(q)) |> ggplot(aes(q)) |> geom_histogram(binwidth = 0.5)
boot |> group_by(replicate) |> summarize(mean = mean(q)) |> ggplot(aes(q)) + geom_histogram(binwidth = 0.5)
boot |> group_by(replicate) |> summarize(mean = mean(q)) |> ggplot(aes(q)) + geom_histogram()
boot |> group_by(replicate) |> summarize(mean = mean(q)) |> ggplot(aes(x = q)) + geom_histogram()
boot |> group_by(replicate) |> summarize(mean = mean(q)) |> ggplot(aes(x = mean)) + geom_histogram()
setwd("~/Desktop/proj/MutantWatch")
entireProtein <- read.csv("entireProtein.csv")
head()
head(entireProtein)
clear
entireProtein |> arrange()
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
colnames(entireProtein)
colnames(entireProtein[, -c("new_seq")])
colnames(entireProtein[, -c(7)])
colnames(entireProtein[, -c(7, 11)])
proteinshort <- entireProtein[, -c(7, 11)]
summary(prto)
summary(proteinshort)
proteinshort |> arrange()
proteinshort |> names()
colnames(entireProtein[, -c(7, 11)])
colnames(entireProtein[, -c(7)])
proteinshort <- entireProtein[, -c(7)]
colnames(proteinshort[, (-c(10))])
colnames(proteinshort[, (-c(11))])
proteinshort <- proteinshort[, (-c(11))]
colnames(proteinshort)
proteinshort |> summary()
proteinshort |> arrange(desc(fa_score))
filter(proteinshort, type == "wild_type")
proteinshort |> group_by(new_aa_1l) |> summarize(mean = mean(ddg_score))
proteinshort |> group_by(new_aa_1l) |> summarize(mean = mean(ddg_score)) |> arrnage(desc(mean))
proteinshort |> group_by(new_aa_1l) |> summarize(mean = mean(ddg_score)) |> arrange(desc(mean))
proteinshort |> group_by(residue_number) |> summarize(mean = mean(ddg_score)) |> arrange(desc(mean))
proteinshort |> arrange(ddg_score)
proteinshort |> arrange(ddg_score)
proteinshort |> summary()
proteinshort |> dim()
proteinshort |> skim()
install.packages("skimr")
library(skimr)
proteinshort |> skim()
x = proteinshort$ddg_score
y = proteinshort$sasa_score
z = proteinshort$diff_secondary_structure
z_values = z
z = outer(x, y, z_values)
proteinshort
proteinshort |> arrnage(desc(diff_sasa))
proteinshort |> arranage(desc(diff_sasa))
proteinshort |> arrange(desc(diff_sasa))
proteinshort |> filter(type == "wild_type")$fa_score
proteinshort |> filter(type == "wild_type")
proteinshort |> filter(ddgscore == 0)
proteinshort |> filter(ddg_score == 0)
proteinshort |> filter(ddg_score < 10 & ddg_score > -10)
proteinshort |> filter(ddg_score < 5 & ddg_score > -5)
proteinshort |> filter(ddg_score < 2 & ddg_score > -2)
proteinshort |> filter(ddg_score < 1 & ddg_score > -1)
proteinshort
proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score))
proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score)) |> arrange()
proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score)) |> arrange(ddg_score)
proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score)) |> arrange(desc())
proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score)) |> arrange(mean_ddg)
proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score)) |> arrange(desc(mean_ddg))
proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score)) |> arrange(desc(mean_ddg))
print(n = 20)
proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score)) |> arrange(desc(mean_ddg)) |> print(n = 20)
aa_and_ddg <- proteinshort |> group_by(new_aa_1l) |> summarize(mean_ddg = mean(ddg_score)) |> arrange(desc(mean_ddg)) |> print(n = 20)
ggplot(aa_and_ddg, aes(x = new_aa_1l, y = mean_ddg))
ggplot(aa_and_ddg, aes(x = new_aa_1l, y = mean_ddg)) + geom_bar()
ggplot(aa_and_ddg, aes(x = new_aa_1l, y = mean_ddg)) + geom_bar()
ggplot(aa_and_ddg, aes(x = factor(new_aa_1l), y = mean_ddg)) + geom_bar()
aa_and_ddg <- proteinshort %>%
group_by(new_aa_1l) %>%
summarize(mean_ddg = mean(ddg_score)) %>%
arrange(desc(mean_ddg)) %>%
print(n = 20)
# Convert new_aa_1l to a factor
aa_and_ddg$new_aa_1l <- factor(aa_and_ddg$new_aa_1l)
# Plot the bar plot
ggplot(aa_and_ddg, aes(x = new_aa_1l, y = mean_ddg)) + geom_bar(stat = "identity")
library(ggthemes)
indtall.packages(ggthemes)
indtall.packages("ggthemes")
install.packages("ggthemes")
library(ggthemes)
# Create the data frame with the mean ddg scores
aa_and_ddg <- proteinshort %>%
group_by(new_aa_1l) %>%
summarize(mean_ddg = mean(ddg_score)) %>%
arrange(desc(mean_ddg)) %>%
print(n = 20)
# Convert new_aa_1l to a factor
aa_and_ddg$new_aa_1l <- factor(aa_and_ddg$new_aa_1l)
# Plot the bar plot with The Economist theme
ggplot(aa_and_ddg, aes(x = new_aa_1l, y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() # use The Economist theme
library(ggplot2)
library(ggthemes)
# Create the data frame with the mean ddg scores
aa_and_ddg <- proteinshort %>%
group_by(new_aa_1l) %>%
summarize(mean_ddg = mean(ddg_score)) %>%
arrange(desc(mean_ddg)) %>%
print(n = 20)
# Convert new_aa_1l to a factor
aa_and_ddg$new_aa_1l <- factor(aa_and_ddg$new_aa_1l)
# Plot the bar plot with The Economist theme
ggplot(aa_and_ddg, aes(x = reorder(new_aa_1l, -mean_ddg), y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() + # use The Economist theme
coord_flip() # flip the x and y axes
library(ggplot2)
library(ggthemes)
library(dplyr)
# Create the data frame with the mean ddg scores, filtering out NA values
aa_and_ddg <- proteinshort %>%
filter(!is.na(ddg_score)) %>% # remove NA values
group_by(new_aa_1l) %>%
summarize(mean_ddg = mean(ddg_score)) %>%
arrange(desc(mean_ddg)) %>%
print(n = 20)
# Convert new_aa_1l to a factor
aa_and_ddg$new_aa_1l <- factor(aa_and_ddg$new_aa_1l)
# Plot the bar plot with The Economist theme
ggplot(aa_and_ddg, aes(x = reorder(new_aa_1l, -mean_ddg), y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() + # use The Economist theme
coord_flip() # flip the x and y axes
library(ggplot2)
library(ggthemes)
library(dplyr)
# Create the data frame with the mean ddg scores, filtering out NA values
aa_and_ddg <- proteinshort %>%
filter(!is.na(ddg_score)) %>% # remove NA values
group_by(new_aa_1l) %>%
summarize(mean_ddg = mean(ddg_score)) %>%
arrange(desc(mean_ddg)) %>%
print(n = 20)
# Convert new_aa_1l to a factor
aa_and_ddg$new_aa_1l <- factor(aa_and_ddg$new_aa_1l)
# Plot the bar plot with The Economist theme
ggplot(aa_and_ddg, aes(x = reorder(new_aa_1l, -mean_ddg), y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() + # use The Economist theme
coord_flip() # flip the x and y axes
library(ggplot2)
library(ggthemes)
library(dplyr)
# Create the data frame with the mean ddg scores, filtering out NA values
aa_and_ddg <- proteinshort %>%
filter(!is.na(ddg_score), !is.na(new_aa_1l)) %>% # remove NA values
group_by(new_aa_1l) %>%
summarize(mean_ddg = mean(ddg_score)) %>%
arrange(desc(mean_ddg)) %>%
print(n = 20)
# Convert new_aa_1l to a factor, excluding NA
aa_and_ddg$new_aa_1l <- factor(aa_and_ddg$new_aa_1l, exclude = NA)
# Plot the bar plot with The Economist theme
ggplot(aa_and_ddg, aes(x = reorder(new_aa_1l, -mean_ddg), y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() + # use The Economist theme
coord_flip() # flip the x and y axes
library(ggplot2)
library(ggthemes)
library(dplyr)
# Create the data frame with the mean ddg scores, filtering out NA values
aa_and_ddg <- proteinshort %>%
filter(!is.na(ddg_score), !is.na(new_aa_1l)) %>% # remove NA values
group_by(new_aa_1l) %>%
summarize(mean_ddg = mean(ddg_score)) %>%
arrange(desc(mean_ddg)) %>%
print(n = 20)
# Convert new_aa_1l to a factor, excluding NA
aa_and_ddg$new_aa_1l <- factor(aa_and_ddg$new_aa_1l, exclude = NA)
# Plot the bar plot with The Economist theme
ggplot(aa_and_ddg, aes(x = reorder(new_aa_1l, -mean_ddg), y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() + # use The Economist theme
coord_flip() # flip the x and y axes
library(ggplot2)
library(ggthemes)
library(dplyr)
# Create the data frame with the mean ddg scores, filtering out NA values
aa_and_ddg <- proteinshort %>%
filter(!is.na(ddg_score), !is.na(new_aa_1l)) %>% # remove NA values
group_by(new_aa_1l) %>%
summarize(mean_ddg = mean(ddg_score)) %>%
arrange(desc(mean_ddg)) %>%
print(n = 20)
# Convert new_aa_1l to a factor, excluding NA
aa_and_ddg$new_aa_1l <- factor(aa_and_ddg$new_aa_1l, exclude = NA)
# Plot the bar plot with The Economist theme
p <- ggplot(aa_and_ddg, aes(x = reorder(new_aa_1l, -mean_ddg), y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() + # use The Economist theme
coord_flip() # flip the x and y axes
# Save the plot as a high-resolution PNG file
ggsave("plot.png", p, width = 8, height = 6, dpi = 300)
library(dplyr)
# Plot the bar plot with The Economist theme
p <- ggplot(aa_and_ddg, aes(x = reorder(new_aa_1l, -mean_ddg), y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() + # use The Economist theme
coord_flip() # flip the x and y axes
entireProtein <- read.csv("entireProtein.csv")
ggplot()
# Plot the bar plot with The Economist theme
p <- ggplot(aa_and_ddg, aes(x = reorder(new_aa_1l, -mean_ddg), y = mean_ddg)) +
geom_bar(stat = "identity", fill = "#4575b4") + # blue color for the bars
labs(title = "Mean ddg scores by residue type", x = "Residue type", y = "Mean ddg score") +
scale_y_continuous(limits = c(0, 2000)) + # set the y-axis limits
theme_economist() + # use The Economist theme
coord_flip() # flip the x and y axes
p
# Save the plot as a high-resolution PNG file
ggsave("plot.png", p, width = 8, height = 6, dpi = 300)
# Save the plot as a high-resolution PNG file
ggsave("plot.png", p, width = 8, height = 6, dpi = 300)
